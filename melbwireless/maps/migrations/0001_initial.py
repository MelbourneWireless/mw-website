# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-05 05:31
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('min_lat', models.FloatField(db_column='minLat')),
                ('max_lat', models.FloatField(db_column='maxLat')),
                ('min_long', models.FloatField(db_column='minLong')),
                ('max_long', models.FloatField(db_column='maxLong')),
                ('mailing_list', models.CharField(db_column='mailingList', max_length=300)),
                ('description', models.TextField()),
                ('wiki', models.TextField(blank=True, db_column='wikiurl')),
                ('newsgroup', models.CharField(blank=True, max_length=450)),
            ],
            options={
                'db_table': 'areas',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('headline', models.CharField(max_length=300)),
                ('story', models.TextField()),
                ('posted', models.DateTimeField(db_column='date')),
            ],
            options={
                'db_table': 'news',
            },
        ),
        migrations.CreateModel(
            name='HotspotLog',
            fields=[
                ('id', models.CharField(db_column='hotspot_id', max_length=9, primary_key=True, serialize=False)),
                ('when', models.DateTimeField(blank=True, db_column='time', null=True)),
                ('email', models.EmailField(blank=True, max_length=75)),
                ('member', models.IntegerField(blank=True, db_column='memberNo', null=True)),
                ('hotspot_ip', models.CharField(blank=True, max_length=45)),
                ('remote_ip', models.CharField(blank=True, max_length=45)),
                ('remote_mac', models.CharField(blank=True, max_length=51)),
                ('message', models.CharField(blank=True, max_length=765)),
            ],
            options={
                'db_table': 'hotspot_log',
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.AutoField(db_column='int_id', primary_key=True, serialize=False)),
                ('mac', models.CharField(blank=True, max_length=60)),
                ('card_power', models.IntegerField()),
                ('card_receive', models.IntegerField(blank=True, null=True)),
                ('card_manufacturer', models.CharField(max_length=75)),
                ('antenna_type', models.CharField(max_length=45)),
                ('antenna_dbi', models.IntegerField()),
                ('cable_loss', models.FloatField(blank=True, null=True)),
                ('channel', models.IntegerField()),
                ('mode', models.CharField(choices=[('unkn', 'Unknown'), ('pckt', 'Packet radio'), ('fhss', '802.11 FHSS'), ('bss', '802.11b BSS (Infrastructure)'), ('ibss', '802.11b IBSS (Ad-hoc)'), ('bssg', '802.11g BSS (Infrastructure)'), ('ibsg', '802.11g IBSS (Ad-hoc)'), ('gbss', '802.11b/g BSS (Infrastructure)'), ('gibs', '802.11b/g IBSS (Ad-hoc)'), ('gjbs', '802.11a BSS (Infrastructure)'), ('gkbs', '802.11a IBSS (Ad-hoc)'), ('vend', 'Vendor/proprietry 2.4Ghz'), ('vind', 'Vendor/proprietry 5.8Ghz'), ('virt', 'Virtual')], max_length=12)),
                ('class_field', models.CharField(choices=[('unknown', 'Unknown'), ('adhoc', 'Ad-hoc'), ('p2p', 'Point to Point'), ('p2mp', 'Point to Multipoint'), ('client', 'Client')], db_column='class', max_length=30)),
            ],
            options={
                'db_table': 'nodes_interfaces',
                'ordering': ['node', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(db_column='link_id', primary_key=True, serialize=False)),
                ('link_class', models.CharField(blank=True, choices=[('regular', 'Regular'), ('virtual', 'Virtual'), ('router', 'Router'), ('backbone', 'Backbone')], db_column='class', max_length=24)),
                ('interface_1', models.ForeignKey(db_column='interface_1', on_delete=django.db.models.deletion.CASCADE, related_name='links_1', to='maps.Interface')),
                ('interface_2', models.ForeignKey(db_column='interface_2', on_delete=django.db.models.deletion.CASCADE, related_name='links_2', to='maps.Interface')),
            ],
            options={
                'db_table': 'nodes_links',
                'ordering': ['interface_1', 'interface_2'],
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('when', models.DateTimeField()),
                ('who', models.CharField(max_length=96)),
                ('what', models.CharField(max_length=765)),
                ('ip', models.CharField(blank=True, max_length=48)),
            ],
            options={
                'db_table': 'log',
            },
        ),
        migrations.CreateModel(
            name='MailQueue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(db_column='create_time')),
                ('send_at', models.DateTimeField(db_column='time_to_send')),
                ('sent', models.DateTimeField(blank=True, db_column='sent_time', null=True)),
                ('id_user', models.IntegerField()),
                ('ip', models.CharField(max_length=60)),
                ('sender', models.CharField(max_length=150)),
                ('recipient', models.TextField()),
                ('headers', models.TextField()),
                ('body', models.TextField()),
                ('try_sent', models.IntegerField()),
                ('delete_after_send', models.BooleanField()),
            ],
            options={
                'db_table': 'mail_queue',
            },
        ),
        migrations.CreateModel(
            name='MailQueueSeq',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'mail_queue_seq',
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(db_column='memberNo', primary_key=True, serialize=False)),
                ('first_name', models.CharField(db_column='firstName', max_length=60)),
                ('last_name', models.CharField(db_column='surName', max_length=120)),
                ('address1', models.CharField(max_length=150)),
                ('address2', models.CharField(max_length=150)),
                ('suburb', models.CharField(max_length=90)),
                ('state', models.CharField(choices=[('ACT', 'Australian Capital Territory'), ('NSW', 'New South Wales'), ('NT', 'Northern Territory'), ('QLD', 'Queensland'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('VIC', 'Victoria'), ('WA', 'Western Australia')], max_length=9)),
                ('postcode', models.CharField(max_length=18)),
                ('email', models.EmailField(max_length=150)),
                ('occupation', models.CharField(max_length=90)),
                ('dob', models.DateField()),
                ('skills', models.TextField()),
                ('heard', models.TextField()),
                ('expect', models.TextField()),
                ('nice', models.TextField()),
                ('member_of', models.TextField(db_column='memberOf')),
                ('spend', models.CharField(max_length=60)),
                ('applied', models.DateField(db_column='appliedDate')),
                ('approved', models.DateField(db_column='approvedDate')),
                ('comments', models.TextField()),
                ('membership_card', models.IntegerField(choices=[(0, 'Card not required'), (1, 'Card dispatched'), (2, 'Card to be mailed'), (3, 'Card to be picked up from meeting')], db_column='cardStatus')),
            ],
            options={
                'db_table': 'members',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='MemberPayment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField(db_column='startDate')),
                ('end_date', models.DateField(db_column='endDate')),
                ('paid', models.BooleanField()),
                ('card', models.BooleanField()),
            ],
            options={
                'db_table': 'membersYears',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.CharField(max_length=9, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=90)),
                ('suburb', models.CharField(max_length=90)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('url', models.CharField(max_length=180)),
                ('status', models.CharField(choices=[('interested', 'Interested'), ('gathering', 'Gathering'), ('building', 'Building'), ('testing', 'Testing'), ('operational', 'Operational')], max_length=36)),
                ('updated', models.DateTimeField()),
                ('old_password', models.CharField(db_column='oldPassword', max_length=120)),
                ('old_email', models.EmailField(db_column='oldEmail', max_length=180)),
                ('notification_distance', models.IntegerField(blank=True, db_column='optdist', null=True)),
            ],
            options={
                'db_table': 'nodes',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='NodeHost',
            fields=[
                ('address', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('host', models.CharField(max_length=384)),
            ],
            options={
                'db_table': 'nodes_hosts',
                'ordering': ['address', 'host', 'node'],
            },
        ),
        migrations.CreateModel(
            name='NodeIp',
            fields=[
                ('address', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('subnet', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=24)),
                ('area', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nodes_ips',
                'ordering': ['address'],
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.AutoField(db_column='receiptId', primary_key=True, serialize=False)),
                ('to', models.CharField(max_length=120)),
                ('email', models.EmailField(max_length=225)),
                ('sent', models.DateField(db_column='receiptDate')),
            ],
            options={
                'db_table': 'receiptHead',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(db_column='service_id', primary_key=True, serialize=False)),
                ('service_type', models.CharField(blank=True, choices=[('dhcp', 'DHCP'), ('dns', 'DNS'), ('finger', 'Finger'), ('ftp', 'FTP'), ('game_server', 'Game Server'), ('imap', 'IMAP'), ('irc', 'IRC'), ('im', 'Instant messaging'), ('other', 'Other'), ('p2p', 'Peer to peer'), ('pop3', 'POP3'), ('qotd', 'Quote of the day'), ('smtp', 'SMTP'), ('ssh', 'SSH'), ('telnet', 'Telnet'), ('www', 'www')], db_column='service_type', max_length=36)),
                ('ip', models.CharField(blank=True, db_column='service_ip', max_length=45)),
                ('port', models.CharField(db_column='service_port', max_length=15)),
                ('description', models.CharField(max_length=300)),
            ],
            options={
                'db_table': 'nodes_services',
                'ordering': ['ip', 'port', 'description', 'node'],
            },
        ),
        migrations.CreateModel(
            name='Statistic',
            fields=[
                ('date', models.DateField(db_column='the_date', primary_key=True, serialize=False)),
                ('operational', models.IntegerField()),
                ('testing', models.IntegerField()),
                ('building', models.IntegerField()),
                ('gathering', models.IntegerField()),
                ('interested', models.IntegerField()),
                ('total', models.IntegerField()),
                ('interfaces', models.IntegerField()),
                ('links', models.IntegerField()),
                ('financial_members', models.IntegerField()),
                ('expired_members', models.IntegerField()),
                ('payment_members', models.IntegerField()),
                ('approval_members', models.IntegerField()),
                ('card_members', models.IntegerField()),
            ],
            options={
                'db_table': 'stats',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='TibOffer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(db_column='timestamp')),
                ('description', models.CharField(max_length=765)),
                ('retail_offer', models.BooleanField(db_column='retail')),
                ('unit_cost', models.FloatField(db_column='costperunit')),
                ('shipping_cost', models.FloatField(db_column='cost_shipping')),
                ('cost_finalised', models.BooleanField(db_column='cost_state')),
                ('quantity_available', models.IntegerField(db_column='qty')),
                ('orders_due_by', models.DateField(db_column='purchase_by')),
                ('payment_due_by', models.DateField(db_column='pay_by')),
                ('notes', models.TextField()),
            ],
            options={
                'db_table': 'tib_offer',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='TibPurchase',
            fields=[
                ('id', models.AutoField(db_column='purchase_id', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('paid', models.FloatField()),
                ('timestamp', models.DateTimeField()),
                ('offer', models.ForeignKey(db_column='offer', on_delete=django.db.models.deletion.CASCADE, to='maps.TibOffer')),
            ],
            options={
                'db_table': 'tib_purchase',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.CharField(db_column='username', max_length=30, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=75)),
                ('email', models.EmailField(max_length=150)),
                ('password', models.CharField(max_length=96)),
                ('email_confirmed', models.BooleanField(db_column='confirm')),
                ('theme', models.CharField(blank=True, max_length=60)),
                ('address', models.CharField(max_length=765)),
                ('phone', models.CharField(max_length=45)),
                ('last_ip', models.CharField(max_length=48)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('failed_attempts', models.IntegerField(db_column='failedAttempts')),
                ('registered', models.DateField(db_column='registeredDate')),
                ('unconfirmed_email', models.EmailField(blank=True, db_column='email_unconfirmed', max_length=150)),
                ('subscribed', models.IntegerField(blank=True, null=True)),
                ('adv', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'users',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Committee',
            fields=[
                ('member', models.OneToOneField(db_column='memberNo', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='maps.Member')),
                ('position', models.CharField(db_column='Position', max_length=75)),
                ('year_ending', models.IntegerField(db_column='yearEnding')),
            ],
            options={
                'db_table': 'committee',
                'ordering': ['-year_ending', 'position'],
            },
            bases=('maps.member',),
        ),
        migrations.CreateModel(
            name='NodeScore',
            fields=[
                ('node', models.OneToOneField(db_column='node', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='maps.Node')),
                ('interfaces', models.IntegerField()),
                ('links', models.IntegerField()),
                ('distance', models.FloatField()),
                ('services', models.IntegerField()),
                ('updated', models.DateTimeField()),
                ('score', models.FloatField()),
                ('area', models.ForeignKey(db_column='area', on_delete=django.db.models.deletion.CASCADE, to='maps.Area')),
            ],
            options={
                'db_table': 'node_score',
                'ordering': ['-score', 'node'],
            },
        ),
        migrations.CreateModel(
            name='ReceiptLine',
            fields=[
                ('receipt', models.OneToOneField(db_column='receiptid', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='maps.Receipt')),
                ('description', models.CharField(db_column='for', max_length=225)),
                ('amount', models.FloatField()),
            ],
            options={
                'db_table': 'receiptLine',
                'ordering': ['receipt'],
            },
            bases=('maps.receipt',),
        ),
        migrations.AddField(
            model_name='user',
            name='membership',
            field=models.ForeignKey(blank=True, db_column='memberNo', null=True, on_delete=django.db.models.deletion.CASCADE, to='maps.Member'),
        ),
        migrations.AddField(
            model_name='tibpurchase',
            name='user',
            field=models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.CASCADE, to='maps.User'),
        ),
        migrations.AddField(
            model_name='tiboffer',
            name='owner',
            field=models.ForeignKey(db_column='owner', on_delete=django.db.models.deletion.CASCADE, to='maps.User'),
        ),
        migrations.AddField(
            model_name='service',
            name='node',
            field=models.ForeignKey(db_column='node', on_delete=django.db.models.deletion.CASCADE, to='maps.Node'),
        ),
        migrations.AddField(
            model_name='nodeip',
            name='node',
            field=models.ForeignKey(blank=True, db_column='node_interface', null=True, on_delete=django.db.models.deletion.CASCADE, to='maps.Node'),
        ),
        migrations.AddField(
            model_name='nodehost',
            name='node',
            field=models.ForeignKey(db_column='node_id', on_delete=django.db.models.deletion.CASCADE, to='maps.Node'),
        ),
        migrations.AddField(
            model_name='node',
            name='area',
            field=models.ForeignKey(blank=True, db_column='area', on_delete=django.db.models.deletion.CASCADE, to='maps.Area'),
        ),
        migrations.AddField(
            model_name='node',
            name='owner',
            field=models.ForeignKey(db_column='owner', on_delete=django.db.models.deletion.CASCADE, to='maps.User'),
        ),
        migrations.AddField(
            model_name='memberpayment',
            name='member',
            field=models.ForeignKey(db_column='memberNo', on_delete=django.db.models.deletion.CASCADE, to='maps.Member'),
        ),
        migrations.AddField(
            model_name='memberpayment',
            name='receipt',
            field=models.ForeignKey(db_column='receiptNo', on_delete=django.db.models.deletion.CASCADE, to='maps.Receipt'),
        ),
        migrations.AddField(
            model_name='interface',
            name='node',
            field=models.ForeignKey(db_column='node', on_delete=django.db.models.deletion.CASCADE, to='maps.Node'),
        ),
        migrations.AddField(
            model_name='hotspotlog',
            name='user',
            field=models.ForeignKey(db_column='username', on_delete=django.db.models.deletion.CASCADE, to='maps.User'),
        ),
        migrations.AddField(
            model_name='nodescore',
            name='user',
            field=models.ForeignKey(db_column='username', on_delete=django.db.models.deletion.CASCADE, to='maps.User'),
        ),
    ]
